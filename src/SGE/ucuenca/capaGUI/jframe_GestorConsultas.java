/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SGE.ucuenca.capaGUI;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import SGE.ucuenca.capaDatos.Operaciones_OracleBD;
import java.awt.Frame;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JHON
 */
public class jframe_GestorConsultas extends javax.swing.JFrame {

    Operaciones_OracleBD datosRecuperados = new Operaciones_OracleBD();

    //Sentencia agregacion de campos
    public static List<String> camposAgregados;

    public jframe_GestorConsultas() {

        initComponents();
        setLocationRelativeTo(null);

        camposAgregados = new ArrayList<>();
        
        //Recuperacion de Tablas al Combobox
        List<String> aux_lista = datosRecuperados.metaDatoTablas();
        Iterator iterador = aux_lista.iterator();
        
        while (iterador.hasNext()) {
            jComboBox_selecTablas.addItem((String) iterador.next());
        }
        

        //Campos agregados con el boton
        jRadioButtonAsc.setSelected(true);
        jCheckBoxAddCondiciones.setSelected(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox_selecTablas = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jRadioButtonAsc = new javax.swing.JRadioButton();
        jRadioButtonDesc = new javax.swing.JRadioButton();
        jComboBoxCamposAgregados = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton_agregarCampo = new javax.swing.JButton();
        jButton_quitarCampo = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList_mostrarCamposdeTabla = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList_mostrarCamposAgregados = new javax.swing.JList<>();
        jDesktopPaneCondiciones = new javax.swing.JDesktopPane();
        jComboBox_selectCampoCondicion = new javax.swing.JComboBox<>();
        jComboBox_selectCondicionValor = new javax.swing.JComboBox<>();
        jTextField_ingreseValor = new javax.swing.JTextField();
        jButton_agregarCondicion = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jComboBoxCamposCondicionJoin = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListCondiciones = new javax.swing.JList<>();
        jButton_quitarCondicion = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jComboBoxAndOr = new javax.swing.JComboBox<>();
        jCheckBoxAddCondiciones = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_visualizarRegistros = new javax.swing.JTable();
        jButton_generarConsulta = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel_selectQuery = new javax.swing.JLabel();
        jButtonNuevaConsulta = new javax.swing.JButton();
        jButtonVerConsulta = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFocusable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Tablas:");

        jComboBox_selecTablas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar" }));
        jComboBox_selecTablas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox_selecTablasItemStateChanged(evt);
            }
        });
        jComboBox_selecTablas.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jComboBox_selecTablasCaretPositionChanged(evt);
            }
        });
        jComboBox_selecTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_selecTablasActionPerformed(evt);
            }
        });

        jLabel3.setText("- Seleccione una tabla a continuacion:");

        jLabel2.setText("Ordenar ");

        jRadioButtonAsc.setText("Ascendentemente");
        jRadioButtonAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonAscActionPerformed(evt);
            }
        });

        jRadioButtonDesc.setText("Descendentemente");
        jRadioButtonDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDescActionPerformed(evt);
            }
        });

        jComboBoxCamposAgregados.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCamposAgregadosItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxCamposAgregados, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonAsc)
                            .addComponent(jRadioButtonDesc))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxCamposAgregados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonAsc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonDesc)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabel13.setText("Campos de Tabla");

        jLabel5.setText("Campos agregados");

        jButton_agregarCampo.setBackground(new java.awt.Color(102, 102, 102));
        jButton_agregarCampo.setForeground(new java.awt.Color(255, 255, 255));
        jButton_agregarCampo.setText(">");
        jButton_agregarCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_agregarCampoActionPerformed(evt);
            }
        });

        jButton_quitarCampo.setBackground(new java.awt.Color(102, 102, 102));
        jButton_quitarCampo.setText("<");
        jButton_quitarCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_quitarCampoActionPerformed(evt);
            }
        });

        jScrollPane4.setViewportView(jList_mostrarCamposdeTabla);

        jList_mostrarCamposAgregados.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jList_mostrarCamposAgregadosComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                jList_mostrarCamposAgregadosComponentRemoved(evt);
            }
        });
        jList_mostrarCamposAgregados.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList_mostrarCamposAgregadosValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(jList_mostrarCamposAgregados);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton_quitarCampo)
                            .addComponent(jButton_agregarCampo)))
                    .addComponent(jLabel13))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel5))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jButton_agregarCampo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_quitarCampo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5))
                .addContainerGap())
        );

        jComboBox_selectCampoCondicion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccionar Campo" }));
        jComboBox_selectCampoCondicion.setEnabled(false);
        jComboBox_selectCampoCondicion.setFocusable(false);
        jComboBox_selectCampoCondicion.setVerifyInputWhenFocusTarget(false);
        jComboBox_selectCampoCondicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_selectCampoCondicionActionPerformed(evt);
            }
        });

        jComboBox_selectCondicionValor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mayor que", "Mayor igual que", "Menor que", "Menor igual que", "Igual a", "Distinto", "Nulo", "No Nulo", "Valor Especifico" }));
        jComboBox_selectCondicionValor.setEnabled(false);

        jTextField_ingreseValor.setEnabled(false);

        jButton_agregarCondicion.setText("Agregar Condicion");
        jButton_agregarCondicion.setEnabled(false);
        jButton_agregarCondicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_agregarCondicionActionPerformed(evt);
            }
        });

        jLabel8.setText("Condiciones:");

        jComboBoxCamposCondicionJoin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Campo" }));
        jComboBoxCamposCondicionJoin.setEnabled(false);
        jComboBoxCamposCondicionJoin.setRequestFocusEnabled(false);
        jComboBoxCamposCondicionJoin.setVerifyInputWhenFocusTarget(false);
        jComboBoxCamposCondicionJoin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxCamposCondicionJoinItemStateChanged(evt);
            }
        });
        jComboBoxCamposCondicionJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCamposCondicionJoinActionPerformed(evt);
            }
        });

        jLabel9.setText("Seleccione:");

        jLabel10.setText("Ingrese valor:");

        jListCondiciones.setEnabled(false);
        jScrollPane2.setViewportView(jListCondiciones);

        jButton_quitarCondicion.setText("Quitar Condicion");
        jButton_quitarCondicion.setEnabled(false);
        jButton_quitarCondicion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_quitarCondicionActionPerformed(evt);
            }
        });

        jLabel12.setText("Join");

        jComboBoxAndOr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AND", "OR" }));
        jComboBoxAndOr.setEnabled(false);

        jCheckBoxAddCondiciones.setBackground(new java.awt.Color(204, 204, 204));
        jCheckBoxAddCondiciones.setForeground(new java.awt.Color(51, 51, 51));
        jCheckBoxAddCondiciones.setText("Agregar Condiciones");
        jCheckBoxAddCondiciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAddCondicionesActionPerformed(evt);
            }
        });

        jDesktopPaneCondiciones.setLayer(jComboBox_selectCampoCondicion, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jComboBox_selectCondicionValor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jTextField_ingreseValor, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jButton_agregarCondicion, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jComboBoxCamposCondicionJoin, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jButton_quitarCondicion, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jLabel12, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jComboBoxAndOr, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPaneCondiciones.setLayer(jCheckBoxAddCondiciones, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPaneCondicionesLayout = new javax.swing.GroupLayout(jDesktopPaneCondiciones);
        jDesktopPaneCondiciones.setLayout(jDesktopPaneCondicionesLayout);
        jDesktopPaneCondicionesLayout.setHorizontalGroup(
            jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPaneCondicionesLayout.createSequentialGroup()
                .addGroup(jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxAddCondiciones, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox_selectCampoCondicion, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPaneCondicionesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9)
                        .addGap(63, 63, 63)
                        .addComponent(jLabel10)
                        .addGap(135, 135, 135))
                    .addGroup(jDesktopPaneCondicionesLayout.createSequentialGroup()
                        .addGap(0, 13, Short.MAX_VALUE)
                        .addComponent(jComboBox_selectCondicionValor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_ingreseValor, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxAndOr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jComboBoxCamposCondicionJoin, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(jDesktopPaneCondicionesLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addGroup(jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton_quitarCondicion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_agregarCondicion, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDesktopPaneCondicionesLayout.setVerticalGroup(
            jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPaneCondicionesLayout.createSequentialGroup()
                .addComponent(jCheckBoxAddCondiciones)
                .addGroup(jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDesktopPaneCondicionesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel9))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel10)
                                .addComponent(jLabel12)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jDesktopPaneCondicionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox_selectCampoCondicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox_selectCondicionValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField_ingreseValor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxCamposCondicionJoin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxAndOr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPaneCondicionesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                        .addComponent(jButton_agregarCondicion)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_quitarCondicion)
                        .addGap(43, 43, 43))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel3)
                                    .addComponent(jComboBox_selecTablas, 0, 330, Short.MAX_VALUE)))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jDesktopPaneCondiciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox_selecTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jDesktopPaneCondiciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        jTable_visualizarRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable_visualizarRegistros);

        jButton_generarConsulta.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        jButton_generarConsulta.setText("Generar Consulta");
        jButton_generarConsulta.setEnabled(false);
        jButton_generarConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_generarConsultaActionPerformed(evt);
            }
        });

        jLabel11.setText("Nota:");

        jLabel_selectQuery.setBackground(new java.awt.Color(204, 204, 204));
        jLabel_selectQuery.setForeground(new java.awt.Color(0, 0, 0));
        jLabel_selectQuery.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonNuevaConsulta.setText("Nueva Consulta");
        jButtonNuevaConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNuevaConsultaActionPerformed(evt);
            }
        });

        jButtonVerConsulta.setText("Ver consulta");
        jButtonVerConsulta.setEnabled(false);
        jButtonVerConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVerConsultaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel_selectQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 760, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jButton_generarConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButtonNuevaConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButtonVerConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonNuevaConsulta)
                    .addComponent(jButton_generarConsulta)
                    .addComponent(jButtonVerConsulta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel_selectQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox_selectCampoCondicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_selectCampoCondicionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_selectCampoCondicionActionPerformed


    private void jButton_generarConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_generarConsultaActionPerformed
        jButtonVerConsulta.setEnabled(true);
        //Generacion de consulta
        DefaultTableModel modelo = new DefaultTableModel();//Creo un modelo de datos para un jtable
        jTable_visualizarRegistros.setModel(modelo);//le asigno a la tabla el modelo de             //datos

        StringBuilder consulta = new StringBuilder("SELECT ");
        datosSelected.forEach((object) -> {
            consulta.append(" ").append(object).append(",");
            modelo.addColumn(object);//creo las columnas de la tabla
        });
        consulta.deleteCharAt(consulta.length() - 1).append(" FROM ");
        HashSet<String> tablasAgregada = new HashSet<>();
        for (int i = 0; i < datosSelected.size(); i++) {
            String dato = (String) datosSelected.get(i);
            tablasAgregada.add(dato.split("\\.")[0]);
        }
        Object[] myArr = tablasAgregada.toArray();
        for (Object myArr1 : myArr) {
            consulta.append(" ").append("ENCUESTA_DB.").append(myArr1.toString()).append(",");
        }
        consulta.deleteCharAt(consulta.length() - 1);
        if (jCheckBoxAddCondiciones.isSelected()) {
            consulta.append(condicionesForConsulta());
        }
        consulta.append(" ORDER BY ").append((String) jComboBoxCamposAgregados.getSelectedItem());

        if (jRadioButtonAsc.isSelected()) {
            consulta.append(" ASC");
        } else {
            consulta.append(" DESC");
        }
        System.out.println("Consulta generada: " + consulta);
        jLabel_selectQuery.setText(consulta.toString());
        ObservableList<Object[]> registros = datosRecuperados.registros(consulta.toString(), datosSelected.size());
        registros.forEach((registro) -> {
            modelo.addRow(registro);
        });
    }//GEN-LAST:event_jButton_generarConsultaActionPerformed
    private StringBuilder condicionesForConsulta() {
        StringBuilder CondicionesForConsultas = new StringBuilder();
        if (!datosCondicion.isEmpty()) {

            CondicionesForConsultas.append(" WHERE ");
            for (int i = 0; i < datosCondicion.size(); i++) {
                CondicionesForConsultas.append(datosCondicion.get(i).toString()).append(" ");
            }
        }
        return CondicionesForConsultas;
    }

    private boolean isString(String dato) {
        for (int i = 0; i < dato.length(); i++) {
            if (Character.isDigit(dato.charAt(i)) == false) {
                return true;
            }
        }
        return false;
    }

    private String returnCondionComparacion(String nombreCondicion) {
        switch (nombreCondicion) {
            case "Mayor que":
                return "> ";
            case "Mayor igual que":
                return ">= ";
            case "Menor que":
                return "< ";
            case "Menor igual que":
                return "<= ";
            case "Igual a":
                return "=";
            case "Distinto":
                return "!=";
            default:
                return null;
        }
    }

    private String returnCondionProcedencia(String nombreCondicion, String valor) {
        switch (nombreCondicion) {
            case "Nulo":
                return "IS NULL";
            case "No Nulo":
                return "IS NOT NULL";
            case "Valor Especifico":
                return "LIKE '%" + valor + "%'";
            default:
                return null;
        }
    }

    private void clasificarCondicion(StringBuilder condicion, String valor) {
        ObservableList<String> condicionesComparacion = FXCollections.observableArrayList("Mayor que",
                "Mayor igual que", "Menor que", "Menor igual que", "Igual a", "Distinto");
        ObservableList<String> condicionesProcedencia = FXCollections.observableArrayList("Nulo", "No Nulo", "Valor Especifico");
        if (condicionesComparacion.contains(valor)) {
            condicion.append(returnCondionComparacion((String) jComboBox_selectCondicionValor.getSelectedItem())).append(" ");
            if (isString(jTextField_ingreseValor.getText())) {
                condicion.append("'").append(jTextField_ingreseValor.getText()).append("'");
            } else {
                condicion.append(jTextField_ingreseValor.getText());
            }
            return;
        }
        if (condicionesProcedencia.contains(valor)) {
            condicion.append(returnCondionProcedencia((String) jComboBox_selectCondicionValor.getSelectedItem(),
                    jTextField_ingreseValor.getText())).append(" ");
        }

    }

    private boolean isContainer(ObservableList<Object> lista, String valor) {
        ObservableList<Object> aux = FXCollections.observableArrayList();
        for (int i = 0; i < lista.size(); i++) {
            if (i == 0) {
                aux.add(lista.get(i));
            } else {
                String aux1 = (String) lista.get(i);
                aux.add(aux1.split("   ")[1]);
            }
        }
        return aux.contains(valor.split("   ")[1]);
    }
    private final ObservableList<Object> datosCondicion = FXCollections.observableArrayList();
    private void jButton_agregarCondicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_agregarCondicionActionPerformed
        // TODO add your handling code here:
        if (jComboBox_selectCampoCondicion.getSelectedIndex() != 0) {
            if (jComboBox_selectCondicionValor.isEnabled()) {
                if (jTextField_ingreseValor.getText().length() == 0) {
                    JOptionPane.showMessageDialog(null, "Ingrese texto en la condicion");
                } else {
                    StringBuilder condicion = new StringBuilder();
                    if (!datosCondicion.isEmpty()) {
                        jComboBoxAndOr.setEnabled(true);
                        condicion.append((String) jComboBoxAndOr.getSelectedItem()).append("   ");
                    } else {
                        jComboBoxAndOr.setEnabled(false);
                    }
                    condicion.append((String) jComboBox_selectCampoCondicion.getSelectedItem()).append(" ");
                    clasificarCondicion(condicion, (String) jComboBox_selectCondicionValor.getSelectedItem());
                    System.out.println(condicion.toString());
                    if (datosCondicion.isEmpty()) {
                        datosCondicion.add(condicion.toString());

                    } else if (!isContainer(datosCondicion, condicion.toString())) {
                        datosCondicion.add(condicion.toString());
                    } else {
                        JOptionPane.showMessageDialog(null, "Ya existe esa condicion");
                    }
                    jComboBoxAndOr.setEnabled(true);
                }
            } else {

                String tabla1 = (String) jComboBox_selectCampoCondicion.getSelectedItem();
                String tabla2 = (String) jComboBoxCamposCondicionJoin.getSelectedItem();
                if (tabla1.split("\\.")[0].equals(tabla2.split("\\.")[0])) {
                    JOptionPane.showMessageDialog(null, "Seleccione Tablas distintas.");
                } else {
                    if (tabla1.split("\\.")[1].equals(tabla2.split("\\.")[1])) {
                        StringBuilder condicion = new StringBuilder();
                        if (!datosCondicion.isEmpty()) {
                            jComboBoxAndOr.setEnabled(true);
                            condicion.append("AND").append("   ");
                        } else {
                            jComboBoxAndOr.setEnabled(false);
                        }
                        condicion.append(tabla1).append(" ");
                        condicion.append(" = ");
                        condicion.append(tabla2).append(" ");
                        System.out.println(condicion.toString());

                        if (datosCondicion.isEmpty()) {
                            datosCondicion.add(condicion.toString());
                        } else if (!isContainer(datosCondicion, condicion.toString())) {
                            datosCondicion.add(condicion.toString());
                        } else {
                            JOptionPane.showMessageDialog(null, "Ya existe esa condicion");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Seleccione Tablas con campos iguales");
                    }
                }
                jComboBoxAndOr.setEnabled(true);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un campo");
        }
        llenarListas(datosCondicion, jListCondiciones);
    }//GEN-LAST:event_jButton_agregarCondicionActionPerformed

    private void jButton_quitarCondicionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_quitarCondicionActionPerformed
        // TODO add your handling code here:
        if (jListCondiciones.getSelectedIndex() != -1) {
            datosCondicion.remove(jListCondiciones.getSelectedValue());
            llenarListas(datosCondicion, jListCondiciones);
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione la condicion a eliminar");
        }
        if (datosCondicion.isEmpty()) {
            jComboBoxAndOr.setEnabled(false);
        }
    }//GEN-LAST:event_jButton_quitarCondicionActionPerformed

    private void jRadioButtonAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonAscActionPerformed
        // TODO add your handling code here:
        if (jRadioButtonAsc.isSelected()) {
            jRadioButtonDesc.setSelected(false);
        } else {
            jRadioButtonDesc.setSelected(true);
        }
    }//GEN-LAST:event_jRadioButtonAscActionPerformed

    private void jButton_quitarCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_quitarCampoActionPerformed
        String nombreTablaSelect = jList_mostrarCamposAgregados.getSelectedValue();
        System.out.println("seleccionado " + jList_mostrarCamposdeTabla.getSelectedValue());
        if (jList_mostrarCamposAgregados.getSelectedIndex() != -1) {
            datosSelected.remove(nombreTablaSelect);
            llenarListas(datosSelected, jList_mostrarCamposAgregados);
            datosConsulta.get(nombreTablaSelect.split("\\.")[0]).add(nombreTablaSelect);
            llenarListas(datosConsulta.get(nombreTablaSelect.split("\\.")[0]), jList_mostrarCamposdeTabla);
            jComboBox_selecTablas.setSelectedItem(nombreTablaSelect.split("\\.")[0]);
            llenarCombobox(datosSelected, jComboBoxCamposAgregados);
            llenarCombobox(datosSelected, jComboBox_selectCampoCondicion);
            llenarCombobox(datosSelected, jComboBoxCamposCondicionJoin);
            if (!datosCondicion.isEmpty()) {
                jComboBoxAndOr.setEnabled(true);
            } else {
                jComboBoxAndOr.setEnabled(false);
            }
        } else {
            System.out.println("Seleccione una columna");
        }

    }//GEN-LAST:event_jButton_quitarCampoActionPerformed
    private final ObservableList<Object> datosSelected = FXCollections.observableArrayList();


    private void jButton_agregarCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_agregarCampoActionPerformed
        String nombreTablaSelect = jList_mostrarCamposdeTabla.getSelectedValue();
        if (jList_mostrarCamposdeTabla.getSelectedIndex() != -1) {
            datosSelected.add(nombreTablaSelect);
            llenarListas(datosSelected, jList_mostrarCamposAgregados);
            datosConsulta.get(nombreTablaSelect.split("\\.")[0]).remove(nombreTablaSelect);
            llenarListas(datosConsulta.get(nombreTablaSelect.split("\\.")[0]), jList_mostrarCamposdeTabla);
            llenarCombobox(datosSelected, jComboBoxCamposAgregados);
            llenarCombobox(datosSelected, jComboBox_selectCampoCondicion);
            llenarCombobox(datosSelected, jComboBoxCamposCondicionJoin);
            if (!datosCondicion.isEmpty()) {
                jComboBoxAndOr.setEnabled(true);
            } else {
                jComboBoxAndOr.setEnabled(false);
            }
        } else {
            System.out.println("Seleccione una columna");
        }

    }//GEN-LAST:event_jButton_agregarCampoActionPerformed

    private void jComboBox_selecTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_selecTablasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_selecTablasActionPerformed

    Map<String, ObservableList<Object>> datosConsulta = new HashMap<>();
    private void jComboBox_selecTablasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox_selecTablasItemStateChanged
        // TODO add your handling code here:
        String nombreTablaSelect = (String) jComboBox_selecTablas.getSelectedItem();
        if (jComboBox_selecTablas.getSelectedIndex() != 0) {
            if (!datosConsulta.containsKey(nombreTablaSelect)) {
                ObservableList<Object> listaObjetos = Operaciones_OracleBD.metaDatoCamposTabla(nombreTablaSelect);
                System.out.println("Boton Ingreso selecciona: " + nombreTablaSelect);
                datosConsulta.put(nombreTablaSelect, listaObjetos);
            } else {
                //Agregando al JLIST
                llenarListas(datosConsulta.get(nombreTablaSelect), jList_mostrarCamposdeTabla);
            }

            //Mostrar el Mapa con Tablas_Campos
            Operaciones_OracleBD.mostrarMapa_Tablas_Campos();
        } else {
            jList_mostrarCamposdeTabla.setModel(new DefaultListModel());
        }
    }//GEN-LAST:event_jComboBox_selecTablasItemStateChanged

    private void llenarListas(ObservableList<Object> datos, JList jList) {
        //Llenar listas
        DefaultListModel modeloListado = new DefaultListModel();
        for (int i = 0; i < datos.size(); i++) {
            modeloListado.addElement(datos.get(i));
        }
        jList.setModel(modeloListado);
    }
    private void jRadioButtonDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDescActionPerformed
        // TODO add your handling code here:
        if (jRadioButtonDesc.isSelected()) {
            jRadioButtonAsc.setSelected(false);
        } else {
            jRadioButtonAsc.setSelected(true);
        }
    }//GEN-LAST:event_jRadioButtonDescActionPerformed
    private void llenarCombobox(ObservableList<Object> datos, JComboBox combo) {
        combo.removeAllItems();
        combo.addItem("Seleccione campo");
        combo.setSelectedIndex(0);
        datos.stream().map((dato) -> {
            combo.addItem(dato);
            return dato;
        }).forEachOrdered((_item) -> {
            combo.repaint();
        });

    }
    private void jList_mostrarCamposAgregadosComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jList_mostrarCamposAgregadosComponentAdded
        // TODO add your handling code here:        

    }//GEN-LAST:event_jList_mostrarCamposAgregadosComponentAdded

    private void jList_mostrarCamposAgregadosComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jList_mostrarCamposAgregadosComponentRemoved
        // TODO add your handling code here:

    }//GEN-LAST:event_jList_mostrarCamposAgregadosComponentRemoved

    private void jList_mostrarCamposAgregadosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList_mostrarCamposAgregadosValueChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_jList_mostrarCamposAgregadosValueChanged

    private void jComboBoxCamposCondicionJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCamposCondicionJoinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxCamposCondicionJoinActionPerformed

    private void jComboBoxCamposCondicionJoinItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxCamposCondicionJoinItemStateChanged
        // TODO add your handling code here:
        if (jComboBoxCamposCondicionJoin.getSelectedIndex() != 0) {
            jComboBox_selectCondicionValor.setEnabled(false);
            jTextField_ingreseValor.setEnabled(false);
            jComboBoxAndOr.setEnabled(false);
        } else {
            jComboBox_selectCondicionValor.setEnabled(true);
            jTextField_ingreseValor.setEnabled(true);
            jComboBoxAndOr.setEnabled(true);
        }
    }//GEN-LAST:event_jComboBoxCamposCondicionJoinItemStateChanged

    private void jComboBox_selecTablasCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jComboBox_selecTablasCaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_selecTablasCaretPositionChanged

    private void jCheckBoxAddCondicionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAddCondicionesActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxAddCondiciones.isSelected()) {
            jComboBox_selectCampoCondicion.setEnabled(true);
            jComboBox_selectCondicionValor.setEnabled(true);
            jTextField_ingreseValor.setEnabled(true);
            jComboBoxAndOr.setEnabled(true);
            jComboBoxCamposCondicionJoin.setEnabled(true);
            jButton_agregarCondicion.setEnabled(true);
            jListCondiciones.setEnabled(true);
            jButton_quitarCondicion.setEnabled(true);
        } else {
            jComboBox_selectCampoCondicion.setEnabled(false);
            jComboBox_selectCondicionValor.setEnabled(false);
            jTextField_ingreseValor.setEnabled(false);
            jComboBoxAndOr.setEnabled(false);
            jComboBoxCamposCondicionJoin.setEnabled(false);
            jButton_agregarCondicion.setEnabled(false);
            jListCondiciones.setEnabled(false);
            jButton_quitarCondicion.setEnabled(false);
        }
    }//GEN-LAST:event_jCheckBoxAddCondicionesActionPerformed

    private void jComboBoxCamposAgregadosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxCamposAgregadosItemStateChanged
        // TODO add your handling code here:
        if (jComboBoxCamposAgregados.getSelectedIndex() > 0) {
            jButton_generarConsulta.setEnabled(true);
        } else {
            jButton_generarConsulta.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBoxCamposAgregadosItemStateChanged

    private void jButtonNuevaConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNuevaConsultaActionPerformed
        // TODO add your handling code here:
        camposAgregados = new ArrayList<>();
        
        //Recuperacion de Tablas al Combobox
        List<String> aux_lista = datosRecuperados.metaDatoTablas();
        Iterator iterador = aux_lista.iterator();
        
        while (iterador.hasNext()) {
            jComboBox_selecTablas.addItem((String) iterador.next());
        }
        

        //Campos agregados con el boton
        jRadioButtonAscActionPerformed(evt);
        jCheckBoxAddCondicionesActionPerformed(evt);
        // jRadioButtonAsc.setSelected(true);
        //jCheckBoxAddCondiciones.setSelected(false);

        datosConsulta.clear();
        datosSelected.clear();
        datosCondicion.clear();

        jComboBox_selecTablas.setSelectedIndex(0);
        llenarListas(datosSelected, jList_mostrarCamposdeTabla);
        llenarListas(datosSelected, jList_mostrarCamposAgregados);
        llenarListas(datosSelected, jListCondiciones);

        DefaultTableModel modelo = new DefaultTableModel();
        jTable_visualizarRegistros.setModel(modelo);

        jLabel_selectQuery.setText("");
        jButtonVerConsulta.setEnabled(false);

    }//GEN-LAST:event_jButtonNuevaConsultaActionPerformed

    private void jButtonVerConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVerConsultaActionPerformed
        // TODO add your handling code here:
        Frame frame=new Frame();
        JTextArea textArea = new JTextArea(6, 25);
        textArea.setText( jLabel_selectQuery.getText());
        textArea.setEditable(true);
        JScrollPane scrollPane = new JScrollPane(textArea);
        JOptionPane.showMessageDialog(frame, scrollPane);

    }//GEN-LAST:event_jButtonVerConsultaActionPerformed

    //Funcion remover todos los item del combobox
    public void vaciarCombobox() {
        // jComboBox_selectCampos.removeAllItems();
        jComboBox_selectCampoCondicion.removeAllItems();
    }

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jframe_GestorConsultas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonNuevaConsulta;
    private javax.swing.JButton jButtonVerConsulta;
    private javax.swing.JButton jButton_agregarCampo;
    private javax.swing.JButton jButton_agregarCondicion;
    private javax.swing.JButton jButton_generarConsulta;
    private javax.swing.JButton jButton_quitarCampo;
    private javax.swing.JButton jButton_quitarCondicion;
    private javax.swing.JCheckBox jCheckBoxAddCondiciones;
    private javax.swing.JComboBox<String> jComboBoxAndOr;
    private javax.swing.JComboBox<String> jComboBoxCamposAgregados;
    private javax.swing.JComboBox<String> jComboBoxCamposCondicionJoin;
    private javax.swing.JComboBox<String> jComboBox_selecTablas;
    private javax.swing.JComboBox<String> jComboBox_selectCampoCondicion;
    private javax.swing.JComboBox<String> jComboBox_selectCondicionValor;
    private javax.swing.JDesktopPane jDesktopPaneCondiciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel_selectQuery;
    private javax.swing.JList<String> jListCondiciones;
    public static javax.swing.JList<String> jList_mostrarCamposAgregados;
    private javax.swing.JList<String> jList_mostrarCamposdeTabla;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButtonAsc;
    private javax.swing.JRadioButton jRadioButtonDesc;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    public static javax.swing.JTable jTable_visualizarRegistros;
    private javax.swing.JTextField jTextField_ingreseValor;
    // End of variables declaration//GEN-END:variables
}
